package GUI;

import buchicomp.AltCompl;
import automata.Automaton;
import IO.ConfigLoad;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 * The graphical user interface to apply the complementation algorithm
 *and launch various algorithms via GOAL
 * @author Joel Allred, University of Fribourg <joel.allred@unifr.ch>
 */
public class MainGUI extends javax.swing.JFrame {

    Automaton a;
    Automaton oA;
    String gffPath;
    String dotPath;
    String inputPath;
    public String goalPath = "";
    long timeout = 10000;
    boolean scheweRank = false;

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        /* loading configuration from config.xml */
        ConfigLoad.configLoad("config.xml", this);
        initComponents();
         
        
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        automatonLoader = new javax.swing.JFileChooser();
        XMLExportWindow = new javax.swing.JFileChooser();
        InputPanel = new javax.swing.JPanel();
        LoadAutomaton = new javax.swing.JButton();
        OpenGoalInput = new javax.swing.JButton();
        inputSizeText = new javax.swing.JLabel();
        labelSize = new javax.swing.JLabel();
        inputTransText = new javax.swing.JLabel();
        labelSize1 = new javax.swing.JLabel();
        makeComplete = new javax.swing.JButton();
        OutputPanel = new javax.swing.JPanel();
        OutStates = new javax.swing.JLabel();
        CompSizeText = new javax.swing.JLabel();
        CompTransText = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        CompSizeUpperText = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        CompSizeLowerText = new javax.swing.JLabel();
        ButtonExportGFF = new javax.swing.JButton();
        openGoalButton = new javax.swing.JButton();
        OutStates1 = new javax.swing.JLabel();
        OutStates2 = new javax.swing.JLabel();
        OutStates3 = new javax.swing.JLabel();
        OutStates4 = new javax.swing.JLabel();
        OpenFirefox = new javax.swing.JButton();
        saveOutputGFF = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        emptinessText = new javax.swing.JLabel();
        ComplementPanel = new javax.swing.JPanel();
        ButtonComplement = new javax.swing.JButton();
        ComplementLabel = new javax.swing.JLabel();
        valueCompTime = new javax.swing.JLabel();
        completeOptCheckBox = new javax.swing.JCheckBox();
        towOneOptCheckBox = new javax.swing.JCheckBox();
        leftOptCheckBox = new javax.swing.JCheckBox();
        SingleBracketOptimCheckBox = new javax.swing.JCheckBox();
        SCCStableCheckBox = new javax.swing.JCheckBox();
        AltComplementPanel = new javax.swing.JPanel();
        SliceButton = new javax.swing.JButton();
        OutStates5 = new javax.swing.JLabel();
        OutStates6 = new javax.swing.JLabel();
        OutStates7 = new javax.swing.JLabel();
        SliceSizeText = new javax.swing.JLabel();
        SliceTransText = new javax.swing.JLabel();
        RankTransText = new javax.swing.JLabel();
        OutStates8 = new javax.swing.JLabel();
        RankSizeText = new javax.swing.JLabel();
        OutStates9 = new javax.swing.JLabel();
        OutStates10 = new javax.swing.JLabel();
        RankButton = new javax.swing.JButton();
        PitermanTransText = new javax.swing.JLabel();
        OutStates11 = new javax.swing.JLabel();
        PitermanSizeText = new javax.swing.JLabel();
        OutStates12 = new javax.swing.JLabel();
        OutStates13 = new javax.swing.JLabel();
        PitermanButton = new javax.swing.JButton();
        SafraTransText = new javax.swing.JLabel();
        OutStates14 = new javax.swing.JLabel();
        SafraSizeText = new javax.swing.JLabel();
        OutStates15 = new javax.swing.JLabel();
        OutStates16 = new javax.swing.JLabel();
        SafraButton = new javax.swing.JButton();
        timeoutSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        ScheweRankBox = new javax.swing.JCheckBox();

        automatonLoader.setDialogTitle("Load Automaton");
        automatonLoader.setFileFilter(new XMLFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BÃ¼chi Complementation");
        setBounds(new java.awt.Rectangle(300, 200, 0, 0));

        InputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N
        InputPanel.setToolTipText("");

        LoadAutomaton.setText("Load Automaton");
        LoadAutomaton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadAutomatonActionPerformed(evt);
            }
        });

        OpenGoalInput.setText("Open in GOAL");
        OpenGoalInput.setEnabled(false);
        OpenGoalInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenGoalInputActionPerformed(evt);
            }
        });

        inputSizeText.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        inputSizeText.setText("n/a");

        labelSize.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        labelSize.setText("States:");

        inputTransText.setText("n/a");

        labelSize1.setText("Transitions:");

        makeComplete.setText("Make Complete");
        makeComplete.setEnabled(false);
        makeComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeCompleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InputPanelLayout = new javax.swing.GroupLayout(InputPanel);
        InputPanel.setLayout(InputPanelLayout);
        InputPanelLayout.setHorizontalGroup(
            InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputPanelLayout.createSequentialGroup()
                .addGroup(InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InputPanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(LoadAutomaton, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(InputPanelLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelSize1)
                            .addComponent(labelSize))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(inputSizeText, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                            .addComponent(inputTransText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(OpenGoalInput, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(makeComplete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(350, Short.MAX_VALUE))
        );
        InputPanelLayout.setVerticalGroup(
            InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoadAutomaton)
                    .addComponent(OpenGoalInput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InputPanelLayout.createSequentialGroup()
                        .addGroup(InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputSizeText)
                            .addComponent(labelSize))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputTransText)
                            .addComponent(labelSize1)))
                    .addComponent(makeComplete))
                .addGap(158, 158, 158))
        );

        OutputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        OutStates.setText("Total Size:");

        CompSizeText.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        CompSizeText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        CompSizeText.setText("0");

        CompTransText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        CompTransText.setText("0");

        jLabel5.setText("Upper Part:");

        CompSizeUpperText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        CompSizeUpperText.setText("0");

        jLabel6.setText("Lower Part:");

        CompSizeLowerText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        CompSizeLowerText.setText("0");

        ButtonExportGFF.setText("Save to GFF");
        ButtonExportGFF.setEnabled(false);
        ButtonExportGFF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExportGFFActionPerformed(evt);
            }
        });

        openGoalButton.setText("Open in GOAL");
        openGoalButton.setEnabled(false);
        openGoalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openGoalButtonActionPerformed(evt);
            }
        });

        OutStates1.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        OutStates1.setText("states");

        OutStates2.setText("transitions");

        OutStates3.setText("states");

        OutStates4.setText("states");

        OpenFirefox.setText("Open in Firefox");
        OpenFirefox.setEnabled(false);
        OpenFirefox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFirefoxActionPerformed(evt);
            }
        });

        saveOutputGFF.setText("Save to output.gff");
        saveOutputGFF.setEnabled(false);
        saveOutputGFF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOutputGFFActionPerformed(evt);
            }
        });

        jLabel2.setText("Emptiness: ");

        emptinessText.setText("empty");

        javax.swing.GroupLayout OutputPanelLayout = new javax.swing.GroupLayout(OutputPanel);
        OutputPanel.setLayout(OutputPanelLayout);
        OutputPanelLayout.setHorizontalGroup(
            OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OutputPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OutputPanelLayout.createSequentialGroup()
                        .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ButtonExportGFF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveOutputGFF, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OpenFirefox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(openGoalButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(OutputPanelLayout.createSequentialGroup()
                        .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(OutputPanelLayout.createSequentialGroup()
                                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(OutStates)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CompSizeLowerText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CompSizeUpperText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CompSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(OutputPanelLayout.createSequentialGroup()
                                .addComponent(emptinessText)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(OutputPanelLayout.createSequentialGroup()
                                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(OutStates3)
                                    .addComponent(OutStates4)
                                    .addComponent(OutStates1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                                .addComponent(CompTransText, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(OutStates2)))))
                .addContainerGap())
        );
        OutputPanelLayout.setVerticalGroup(
            OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OutStates)
                    .addComponent(CompSizeText)
                    .addComponent(CompTransText)
                    .addComponent(OutStates1)
                    .addComponent(OutStates2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(CompSizeUpperText)
                    .addComponent(OutStates4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CompSizeLowerText)
                    .addComponent(jLabel6)
                    .addComponent(OutStates3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(emptinessText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonExportGFF)
                    .addComponent(openGoalButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OpenFirefox)
                    .addComponent(saveOutputGFF))
                .addContainerGap())
        );

        ComplementPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tuple Complementation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        ButtonComplement.setText("Build Complement");
        ButtonComplement.setEnabled(false);
        ButtonComplement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonComplementActionPerformed(evt);
            }
        });

        ComplementLabel.setText("Complementation time: ");

        valueCompTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        valueCompTime.setText("n/a");

        completeOptCheckBox.setSelected(true);
        completeOptCheckBox.setText("use completeness optimisation");

        towOneOptCheckBox.setSelected(true);
        towOneOptCheckBox.setText("use 2-1 optimisation");
        towOneOptCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                towOneOptCheckBoxActionPerformed(evt);
            }
        });

        leftOptCheckBox.setSelected(true);
        leftOptCheckBox.setText("use left optimisation");
        leftOptCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftOptCheckBoxActionPerformed(evt);
            }
        });

        SingleBracketOptimCheckBox.setSelected(true);
        SingleBracketOptimCheckBox.setText("use zero-less optimisation");
        SingleBracketOptimCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SingleBracketOptimCheckBoxActionPerformed(evt);
            }
        });

        SCCStableCheckBox.setSelected(true);
        SCCStableCheckBox.setText("use SCC stable optimisation");

        javax.swing.GroupLayout ComplementPanelLayout = new javax.swing.GroupLayout(ComplementPanel);
        ComplementPanel.setLayout(ComplementPanelLayout);
        ComplementPanelLayout.setHorizontalGroup(
            ComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ComplementPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ComplementPanelLayout.createSequentialGroup()
                        .addComponent(ButtonComplement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ComplementPanelLayout.createSequentialGroup()
                        .addGap(0, 114, Short.MAX_VALUE)
                        .addGroup(ComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ComplementPanelLayout.createSequentialGroup()
                                .addComponent(ComplementLabel)
                                .addGap(8, 8, 8)
                                .addComponent(valueCompTime, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ComplementPanelLayout.createSequentialGroup()
                                .addGroup(ComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(towOneOptCheckBox)
                                    .addComponent(completeOptCheckBox)
                                    .addComponent(leftOptCheckBox)
                                    .addComponent(SingleBracketOptimCheckBox)
                                    .addComponent(SCCStableCheckBox))
                                .addGap(15, 15, 15))))))
        );
        ComplementPanelLayout.setVerticalGroup(
            ComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ComplementPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ButtonComplement)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(completeOptCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(leftOptCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(towOneOptCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SingleBracketOptimCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SCCStableCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComplementLabel)
                    .addComponent(valueCompTime)))
        );

        AltComplementPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Alternate Complementation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        SliceButton.setText("Slice Complement");
        SliceButton.setEnabled(false);
        SliceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SliceButtonActionPerformed(evt);
            }
        });

        OutStates5.setText("Size:");

        OutStates6.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        OutStates6.setText("states");

        OutStates7.setText("transitions");

        SliceSizeText.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        SliceSizeText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        SliceSizeText.setText("0");

        SliceTransText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        SliceTransText.setText("0");

        RankTransText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        RankTransText.setText("0");

        OutStates8.setText("transitions");

        RankSizeText.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        RankSizeText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        RankSizeText.setText("0");

        OutStates9.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        OutStates9.setText("states");

        OutStates10.setText("Size:");

        RankButton.setText("Rank Complement");
        RankButton.setEnabled(false);
        RankButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RankButtonActionPerformed(evt);
            }
        });

        PitermanTransText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        PitermanTransText.setText("0");

        OutStates11.setText("transitions");

        PitermanSizeText.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        PitermanSizeText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        PitermanSizeText.setText("0");

        OutStates12.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        OutStates12.setText("states");

        OutStates13.setText("Size:");

        PitermanButton.setText("Piterman Complement");
        PitermanButton.setEnabled(false);
        PitermanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PitermanButtonActionPerformed(evt);
            }
        });

        SafraTransText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        SafraTransText.setText("0");

        OutStates14.setText("transitions");

        SafraSizeText.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        SafraSizeText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        SafraSizeText.setText("0");

        OutStates15.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        OutStates15.setText("states");

        OutStates16.setText("Size:");

        SafraButton.setText("Safra Complement");
        SafraButton.setEnabled(false);
        SafraButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SafraButtonActionPerformed(evt);
            }
        });

        timeoutSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 5, 240, 5));
        timeoutSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                timeoutSpinnerStateChanged(evt);
            }
        });

        jLabel1.setText("timeout (secs)");

        ScheweRankBox.setSelected(true);
        ScheweRankBox.setText("Schewe");
        ScheweRankBox.setEnabled(false);
        ScheweRankBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheweRankBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AltComplementPanelLayout = new javax.swing.GroupLayout(AltComplementPanel);
        AltComplementPanel.setLayout(AltComplementPanelLayout);
        AltComplementPanelLayout.setHorizontalGroup(
            AltComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AltComplementPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AltComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AltComplementPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeoutSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AltComplementPanelLayout.createSequentialGroup()
                        .addGroup(AltComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AltComplementPanelLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(AltComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AltComplementPanelLayout.createSequentialGroup()
                                        .addComponent(OutStates5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SliceSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(OutStates6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SliceTransText, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(OutStates7))
                                    .addGroup(AltComplementPanelLayout.createSequentialGroup()
                                        .addComponent(OutStates10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RankSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(OutStates9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RankTransText, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(OutStates8))
                                    .addGroup(AltComplementPanelLayout.createSequentialGroup()
                                        .addComponent(OutStates16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SafraSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(OutStates15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SafraTransText, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(OutStates14))
                                    .addGroup(AltComplementPanelLayout.createSequentialGroup()
                                        .addComponent(OutStates13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PitermanSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(OutStates12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PitermanTransText, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(OutStates11))))
                            .addComponent(SafraButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PitermanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(AltComplementPanelLayout.createSequentialGroup()
                                .addComponent(RankButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ScheweRankBox))
                            .addComponent(SliceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        AltComplementPanelLayout.setVerticalGroup(
            AltComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AltComplementPanelLayout.createSequentialGroup()
                .addGroup(AltComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeoutSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(SliceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AltComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OutStates5)
                    .addComponent(OutStates6)
                    .addComponent(OutStates7)
                    .addComponent(SliceSizeText)
                    .addComponent(SliceTransText))
                .addGap(18, 18, 18)
                .addGroup(AltComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RankButton)
                    .addComponent(ScheweRankBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AltComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OutStates10)
                    .addComponent(OutStates9)
                    .addComponent(OutStates8)
                    .addComponent(RankSizeText)
                    .addComponent(RankTransText))
                .addGap(18, 18, 18)
                .addComponent(PitermanButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AltComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OutStates13)
                    .addComponent(OutStates12)
                    .addComponent(OutStates11)
                    .addComponent(PitermanSizeText)
                    .addComponent(PitermanTransText))
                .addGap(18, 18, 18)
                .addComponent(SafraButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AltComplementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OutStates16)
                    .addComponent(OutStates15)
                    .addComponent(OutStates14)
                    .addComponent(SafraSizeText)
                    .addComponent(SafraTransText))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(InputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(OutputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ComplementPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AltComplementPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ComplementPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OutputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(AltComplementPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonComplementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonComplementActionPerformed
        /* construct complement automaton */
        
        ButtonComplement.setText("Tuple Complement: Computing...");
        
        /* launch tuple construction */
        oA = buchicomp.TupleConstruction.tupleConstruction(
                a,
                completeOptCheckBox.isSelected(),
                leftOptCheckBox.isSelected(),
                towOneOptCheckBox.isSelected(), 
                SingleBracketOptimCheckBox.isSelected(),
                SCCStableCheckBox.isSelected()
        );
        
        /* print results */
        CompSizeText.setText(Integer.toString(oA.getStates().size()));
        CompTransText.setText(Integer.toString(oA.getTransitions().size()));
        CompSizeUpperText.setText(Integer.toString(oA.getSizeUpperPart()));
        CompSizeLowerText.setText(Integer.toString(oA.getSizeLowerPart()));
        valueCompTime.setText(Long.toString(oA.getTime()) + " ms");
      
        /* print emptiness */
        if(oA.isEmptyLanguage()){
            emptinessText.setText("empty");
        } else {
            emptinessText.setText("non empty");
        }
         
        /* enable export buttons */
        ButtonExportGFF.setEnabled(true);
        valueCompTime.setVisible(true);
        ComplementLabel.setVisible(true);
        saveOutputGFF.setEnabled(true);
        
        ButtonComplement.setText("Tuple Complement");
    }//GEN-LAST:event_ButtonComplementActionPerformed

    private void LoadAutomatonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadAutomatonActionPerformed
        
        /* open dialog */
        int returnVal = automatonLoader.showOpenDialog(this);

        /* configure gui if selected file */
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            /* import automaton from XML file */
            inputPath=automatonLoader.getSelectedFile().getAbsolutePath();
            enableComplementation(true);
            System.out.println("input path: " + inputPath);
            a = IO.XMLImport.importXMLFile(inputPath, this);
            inputSizeText.setText(Integer.toString(a.getStates().size()));
            inputTransText.setText(Integer.toString(a.getTransitions().size()));
            
            CompSizeText.setText("0");
            CompSizeLowerText.setText("0");
            CompSizeUpperText.setText("0");
            valueCompTime.setText("n/a");
            CompTransText.setText("0");
            PitermanSizeText.setText("0");
            PitermanTransText.setText("0");
            RankSizeText.setText("0");
            RankTransText.setText("0");
            SafraSizeText.setText("0");
            SafraTransText.setText("0");
            SliceSizeText.setText("0");
            SliceTransText.setText("0");
            
            if (!a.getStates().isEmpty()) {

                /* update possible optimisations if complete */
                if (!a.isComplete()) {
                    completeOptCheckBox.setSelected(false);
                    completeOptCheckBox.setEnabled(false);
                    makeComplete.setEnabled(true);
                    makeComplete.setText("Make Complete");
                } else {
                    completeOptCheckBox.setEnabled(true);
                    makeComplete.setEnabled(false);
                    makeComplete.setText("Already Complete");
                }
            }
        }
    }//GEN-LAST:event_LoadAutomatonActionPerformed

    /* enable various complementation buttons */
    public void enableComplementation(boolean b) {
        ButtonComplement.setEnabled(b);        
        SliceButton.setEnabled(b);
        RankButton.setEnabled(b);
        PitermanButton.setEnabled(b);
        SafraButton.setEnabled(b);
        OpenGoalInput.setEnabled(b);
        ScheweRankBox.setEnabled(b);
        if (!b) {
            completeOptCheckBox.setEnabled(false);
        }
    }
    
    /* public method to update completeness optimisation button */
    public void enableCompletion(boolean b) {
        makeComplete.setEnabled(b);
    }
    
    
    private void OpenGoalInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenGoalInputActionPerformed
      
        /* open input automaton in GOAL */
        System.out.println("Open input automaton in Goal: " + inputPath);
        
        PrintWriter out;
        try {
            out = new PrintWriter("scripts/script");
            out.println("open \"" + inputPath + "\";");
            out.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }     
        
         try {
            Runtime runTime = Runtime.getRuntime();
            String[] commands = new String[2];
            commands[0] = goalPath;         
            commands[1] = "batch ./scripts/script";    
            Process process = runTime.exec(commands);
                    
        } catch (IOException e) {
        }
    }//GEN-LAST:event_OpenGoalInputActionPerformed

  
    private void openGoalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openGoalButtonActionPerformed
        /* open saved GFF in GOAL */
        System.out.println("Open in Goal: " + gffPath);

        try {
            Runtime runTime = Runtime.getRuntime();
            String[] commands = new String[2];
            commands[0]=goalPath;
            commands[1]="batch \"open " + gffPath +";\"";
            Process process = runTime.exec(commands);

        } catch (IOException e) {
        }
    }//GEN-LAST:event_openGoalButtonActionPerformed

    private void ButtonExportGFFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExportGFFActionPerformed
       /* export to specific GFF file */
        if (oA != null) {
            int returnVal = XMLExportWindow.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                /* export automaton to GFF file */
                gffPath = XMLExportWindow.getSelectedFile().getAbsolutePath();
                IO.XMLExport.export(oA, gffPath);
                System.out.println("Exported to :" + gffPath);
                openGoalButton.setEnabled(true);
                OpenFirefox.setEnabled(true);
            }
        }
    }//GEN-LAST:event_ButtonExportGFFActionPerformed

    private void OpenFirefoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFirefoxActionPerformed
        /* open saved GFF in Firefox */
        try {
            Runtime runTime = Runtime.getRuntime();
            String[] commands = new String[2];
            commands[0]="firefox";
            commands[1]= gffPath;
            Process process = runTime.exec(commands);

        } catch (IOException e) {
        }
    }//GEN-LAST:event_OpenFirefoxActionPerformed

    private void saveOutputGFFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOutputGFFActionPerformed
        if (oA != null) {

                /* export automaton to ./automata/output.gff */
                gffPath = "./automata/output.gff";
                IO.XMLExport.export(oA, gffPath);
                System.out.println("Exported to :" + gffPath);
                openGoalButton.setEnabled(true);
                OpenFirefox.setEnabled(true);
            
        }
    }//GEN-LAST:event_saveOutputGFFActionPerformed

    private void SliceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SliceButtonActionPerformed

        Thread t = new Thread(new AltCompl("slice","", this, inputPath, timeout));
        t.start(); 
        SliceButton.setText("Slice : computing...");
    }//GEN-LAST:event_SliceButtonActionPerformed


    private void RankButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RankButtonActionPerformed

        String opt = "";
        if (scheweRank) {
            opt = "-tr -cp";
        }
        
        Thread t = new Thread(new AltCompl("rank", opt, this, inputPath, timeout));
        t.start();
        RankButton.setText("Rank : computing...");
    }//GEN-LAST:event_RankButtonActionPerformed

    private void PitermanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PitermanButtonActionPerformed
        Thread t = new Thread(new AltCompl("piterman","", this, inputPath, timeout));
        t.start(); 
        PitermanButton.setText("Piterman : computing...");
    }//GEN-LAST:event_PitermanButtonActionPerformed

    private void SafraButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SafraButtonActionPerformed
       Thread t = new Thread(new AltCompl("safra","", this, inputPath, timeout));
        t.start(); 
        SafraButton.setText("Safra : computing...");
    }//GEN-LAST:event_SafraButtonActionPerformed

    private void timeoutSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_timeoutSpinnerStateChanged
        timeout= ((int) timeoutSpinner.getValue() * 1000);
    }//GEN-LAST:event_timeoutSpinnerStateChanged

    private void ScheweRankBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheweRankBoxActionPerformed
        scheweRank = ScheweRankBox.isSelected();
    }//GEN-LAST:event_ScheweRankBoxActionPerformed

    private void makeCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeCompleteActionPerformed
        buchicomp.Completion.Complete(a);

        inputSizeText.setText(Integer.toString(a.getStates().size()));
        inputTransText.setText(Integer.toString(a.getTransitions().size()));
        ButtonComplement.setEnabled(true);
        SliceButton.setEnabled(true);
        RankButton.setEnabled(true);
        PitermanButton.setEnabled(true);
        SafraButton.setEnabled(true);
        OpenGoalInput.setEnabled(true);
        CompSizeText.setText("0");
        CompSizeLowerText.setText("0");
        CompSizeUpperText.setText("0");
        valueCompTime.setText("n/a");
        CompTransText.setText("0");
        PitermanSizeText.setText("0");
        PitermanTransText.setText("0");
        RankSizeText.setText("0");
        RankTransText.setText("0");
        SafraSizeText.setText("0");
        SafraTransText.setText("0");
        SliceSizeText.setText("0");
        SliceTransText.setText("0");
        
        makeComplete.setEnabled(false);
        completeOptCheckBox.setEnabled(true);
        makeComplete.setText("Already Complete");

    }//GEN-LAST:event_makeCompleteActionPerformed

    private void towOneOptCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_towOneOptCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_towOneOptCheckBoxActionPerformed

    private void leftOptCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftOptCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_leftOptCheckBoxActionPerformed

    private void SingleBracketOptimCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SingleBracketOptimCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SingleBracketOptimCheckBoxActionPerformed

    public void updateAlt(String type, int states, int transitions, boolean failed){
        if(type.equals("slice")){
           SliceSizeText.setText(Integer.toString(states));
           SliceTransText.setText(Integer.toString(transitions));
           if(failed){
               SliceButton.setText("Slice compl. failed");
           }
           SliceButton.setText("Slice complement");
        }
        if(type.equals("rank")){
           RankSizeText.setText(Integer.toString(states));
           RankTransText.setText(Integer.toString(transitions));
           if(failed){
               RankButton.setText("Rank compl. failed");
           } else {
           RankButton.setText("Rank complement");
           }
        }
        if(type.equals("piterman")){
           PitermanSizeText.setText(Integer.toString(states));
           PitermanTransText.setText(Integer.toString(transitions));
           if(failed){
           PitermanButton.setText("Piterman compl. failed");
           } else {
           PitermanButton.setText("Piterman complement");
           }
        }
        if(type.equals("safra")){
           SafraSizeText.setText(Integer.toString(states));
           SafraTransText.setText(Integer.toString(transitions));
           if(failed){
               SafraButton.setText("Safra compl. failed");
           } else {
           SafraButton.setText("Safra complement");
           }
        }
   
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AltComplementPanel;
    private javax.swing.JButton ButtonComplement;
    private javax.swing.JButton ButtonExportGFF;
    private javax.swing.JLabel CompSizeLowerText;
    private javax.swing.JLabel CompSizeText;
    private javax.swing.JLabel CompSizeUpperText;
    private javax.swing.JLabel CompTransText;
    private javax.swing.JLabel ComplementLabel;
    private javax.swing.JPanel ComplementPanel;
    private javax.swing.JPanel InputPanel;
    private javax.swing.JButton LoadAutomaton;
    private javax.swing.JButton OpenFirefox;
    private javax.swing.JButton OpenGoalInput;
    private javax.swing.JLabel OutStates;
    private javax.swing.JLabel OutStates1;
    private javax.swing.JLabel OutStates10;
    private javax.swing.JLabel OutStates11;
    private javax.swing.JLabel OutStates12;
    private javax.swing.JLabel OutStates13;
    private javax.swing.JLabel OutStates14;
    private javax.swing.JLabel OutStates15;
    private javax.swing.JLabel OutStates16;
    private javax.swing.JLabel OutStates2;
    private javax.swing.JLabel OutStates3;
    private javax.swing.JLabel OutStates4;
    private javax.swing.JLabel OutStates5;
    private javax.swing.JLabel OutStates6;
    private javax.swing.JLabel OutStates7;
    private javax.swing.JLabel OutStates8;
    private javax.swing.JLabel OutStates9;
    private javax.swing.JPanel OutputPanel;
    private javax.swing.JButton PitermanButton;
    private javax.swing.JLabel PitermanSizeText;
    private javax.swing.JLabel PitermanTransText;
    private javax.swing.JButton RankButton;
    private javax.swing.JLabel RankSizeText;
    private javax.swing.JLabel RankTransText;
    private javax.swing.JCheckBox SCCStableCheckBox;
    private javax.swing.JButton SafraButton;
    private javax.swing.JLabel SafraSizeText;
    private javax.swing.JLabel SafraTransText;
    private javax.swing.JCheckBox ScheweRankBox;
    private javax.swing.JCheckBox SingleBracketOptimCheckBox;
    private javax.swing.JButton SliceButton;
    private javax.swing.JLabel SliceSizeText;
    private javax.swing.JLabel SliceTransText;
    private javax.swing.JFileChooser XMLExportWindow;
    private javax.swing.JFileChooser automatonLoader;
    private javax.swing.JCheckBox completeOptCheckBox;
    private javax.swing.JLabel emptinessText;
    private javax.swing.JLabel inputSizeText;
    private javax.swing.JLabel inputTransText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel labelSize;
    private javax.swing.JLabel labelSize1;
    private javax.swing.JCheckBox leftOptCheckBox;
    private javax.swing.JButton makeComplete;
    private javax.swing.JButton openGoalButton;
    private javax.swing.JButton saveOutputGFF;
    private javax.swing.JSpinner timeoutSpinner;
    private javax.swing.JCheckBox towOneOptCheckBox;
    private javax.swing.JLabel valueCompTime;
    // End of variables declaration//GEN-END:variables
}
